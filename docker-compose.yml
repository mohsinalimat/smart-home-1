---
version: "3"

networks:
  default:
    ipam:
      config:
        - subnet: 172.22.0.0/16

  ingress:
    ipam:
      config:
        - subnet: 172.27.0.0/16

services:
  docker-socket-proxy:
    environment:
      CONTAINERS: 1
    image: tecnativa/docker-socket-proxy:latest
    networks:
      - ingress
    ports:
      - 127.0.0.1:2375:2375/tcp
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  ecowitt2mqtt:
    depends_on:
      - vernemq
    environment:
      HASS_DISCOVERY: "true"
      MQTT_BROKER: vernemq
      MQTT_PASSWORD: ${VERNEMQ_PASSWORD_ECOWITT}
      MQTT_USERNAME: ecowitt
    image: bachya/ecowitt2mqtt:${ECOWITT2MQTT_VERSION}
    ports:
      - 8080:8080/tcp
    restart: always

  esphome:
    depends_on:
      - traefik
    environment:
      ESPHOME_DASHBOARD_USE_PING: "true"
    image: esphome/esphome:${ESPHOME_VERSION}
    network_mode: host
    restart: always
    volumes:
      - ./esphome:/config

  hass:
    depends_on:
      - hass-db
      - traefik
      - vernemq
      - zwave-js
    image: ghcr.io/home-assistant/home-assistant:${HOME_ASSISTANT_CORE_VERSION}
    labels:
      traefik.enable: true
      traefik.frontend.passHostHeader: true
      traefik.frontend.whiteList.useXForwardedFor: true
      traefik.http.routers.hass.entrypoints: websecure
      traefik.http.routers.hass.middlewares: blocklist,security
      traefik.http.routers.hass.rule: Host(`${TRAEFIK_HOST_HASS}`)
      traefik.http.routers.hass.tls: true
      traefik.http.services.hass.loadbalancer.server.port: 8123
    network_mode: host
    restart: always
    volumes:
      - ./hass/settings/blueprints:/config/blueprints
      - ./hass/settings/conf:/config/conf
      - ./hass/settings/configuration.yaml:/config/configuration.yaml
      - ./hass/settings/custom_components:/config/custom_components
      - ./hass/settings/scenes.yaml:/config/scenes.yaml
      - ./hass/settings/secrets.yaml:/config/secrets.yaml
      - hass-config:/config

  hass-db:
    environment:
      POSTGRES_DB: ${HASS_DB_NAME}
      POSTGRES_PASSWORD: ${HASS_DB_PASSWORD}
      POSTGRES_USER: ${HASS_DB_USER}
    healthcheck:
      interval: 5s
      retries: 3
      test:
        - CMD-SHELL
        - pg_isready -U ${HASS_DB_USER}
      timeout: 10s
    image: postgres:${POSTGRES_VERSION}-alpine
    ports:
      - 5432:5432/tcp
    restart: always
    volumes:
      - hass-db-data:/var/lib/postgresql/data

  netdata:
    cap_add:
      - SYS_PTRACE
    environment:
      NETDATA_CLAIM_ROOMS: "${NETDATA_CLAIM_ROOMS}"
      NETDATA_CLAIM_TOKEN: "${NETDATA_CLAIM_TOKEN}"
      NETDATA_CLAIM_URL: "https://app.netdata.cloud"
    hostname: pmc-lxc-homeautomation
    image: "netdata/netdata:v${NETDATA_VERSION}"
    ports:
      - 19999:19999
    restart: always
    security_opt:
      - apparmor:unconfined
    volumes:
      - /etc/group:/host/etc/group:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /etc/passwd:/host/etc/passwd:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - netdata-cache:/var/cache/netdata
      - netdata-config:/etc/netdata
      - netdata-lib:/var/lib/netdata

  traefik:
    command: |
      --accesslog.filepath=/var/log/access.log
      --accesslog.filters.statusCodes=400-499
      --api
      --certificatesResolvers.linode.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      --certificatesresolvers.linode.acme.dnschallenge.provider=linodev4
      --certificatesresolvers.linode.acme.dnschallenge=true
      --certificatesresolvers.linode.acme.email=${ACME_EMAIL_ADDRESS}
      --certificatesresolvers.linode.acme.storage=/letsencrypt/acme.json
      --entrypoints.websecure.address=:443
      --providers.docker
      --providers.docker.endpoint=tcp://docker-socket-proxy:2375
      --providers.docker.exposedbydefault=false
      --providers.file.directory=/etc/traefik/
    depends_on:
      - docker-socket-proxy
      - traefik-middleware-ipfilter
    environment:
      LINODE_PROPAGATION_TIMEOUT: 900
      LINODE_TOKEN: ${TRAEFIK_LINODE_API_KEY}
      TRAEFIK_PILOT_DASHBOARD: "false"
    extra_hosts:
      - host.docker.internal:172.22.0.1
    image: traefik:${TRAEFIK_VERSION}
    labels:
      traefik.enable: true
      traefik.http.middlewares.auth.basicauth.users: ${TRAEFIK_USERS}
      traefik.http.middlewares.blocklist.forwardauth.address: >-
        http://traefik-middleware-ipfilter:8081
      traefik.http.middlewares.security.ratelimit.average: 100
      traefik.http.middlewares.security.ratelimit.burst: 50
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.middlewares: auth,blocklist,security
      traefik.http.routers.traefik.rule: Host(`${TRAEFIK_HOST_TRAEFIK}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls.certresolver: linode
      traefik.http.routers.wildcard-certs.tls.certresolver: linode
      traefik.http.routers.wildcard-certs.tls.domains[0].main: |
        ${TRAEFIK_DOMAIN}
      traefik.http.routers.wildcard-certs.tls.domains[0].sans: |
        *.${TRAEFIK_DOMAIN}
    networks:
      - default
      - ingress
    ports:
      - 443:443/tcp
    restart: always
    volumes:
      - ./traefik/settings:/etc/traefik:ro
      - /var/log/traefik:/var/log
      - letsencrypt-data:/letsencrypt

  traefik-middleware-ipfilter:
    build:
      context: ./lib/docker-nginx-with-modules
      args:
        modules: https://github.com/leev/ngx_http_geoip2_module.git
    networks:
      - ingress
    ports:
      - 8081:8081/tcp
    restart: always
    volumes:
      - ./traefik-middleware-ipfilter/geoip.conf:/etc/nginx/conf.d/geoip.conf:ro
      - ./traefik-middleware-ipfilter/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./traefik-middleware-ipfilter/traefik.conf:/etc/nginx/conf.d/traefik.conf:ro
      - /usr/share/GeoIP:/usr/share/GeoIP:ro

  vernemq:
    environment:
      DOCKER_VERNEMQ_ACCEPT_EULA: "yes"
      DOCKER_VERNEMQ_PLUGINS.vmq_bridge: "on"
      DOCKER_VERNEMQ_USER_ECOWITT: ${VERNEMQ_PASSWORD_ECOWITT}
      DOCKER_VERNEMQ_USER_HASS: ${VERNEMQ_PASSWORD_HASS}
      DOCKER_VERNEMQ_USER_RTLAMR: ${VERNEMQ_PASSWORD_RTLAMR}
      DOCKER_VERNEMQ_USER_SWITCHBOT: ${VERNEMQ_PASSWORD_SWITCHBOT}
      DOCKER_VERNEMQ_USER_VALETUDO: ${VERNEMQ_PASSWORD_VALETUDO}
      DOCKER_VERNEMQ_USER_WYZE: ${VERNEMQ_PASSWORD_WYZE}
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0: ${VERNEMQ_BRIDGE_HOST}
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.cafile: |
        /etc/ssl/certs/ISRG_Root_X1.pem
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.insecure: "on"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.max_outgoing_buffered_messages: 100
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.password: ${VERNEMQ_BRIDGE_PASSWORD}
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.topic.1: "* in"
      DOCKER_VERNEMQ_vmq_bridge.ssl.br0.username: hub_mqtt
    healthcheck:
      interval: 5s
      retries: 3
      test:
        - CMD-SHELL
        - vernemq ping | grep -q pong
      timeout: 10s
    image: vernemq/vernemq:${VERNEMQ_VERSION}-alpine
    ports:
      - 1883:1883/tcp
    restart: always
    user: root
    volumes:
      - /etc/ssl:/etc/ssl:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro

  zwave-js:
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    environment:
      NETWORK_KEY: ${ZWAVE_JS_NETWORK_KEY}
    image: zwavejs/zwavejs2mqtt:${ZJS2M_VERSION}
    ports:
      - 127.0.0.1:3000:3000/tcp
    restart: always
    volumes:
      - zwave-js-config:/usr/src/app/store

volumes:
  hass-config:
  hass-db-data:
  letsencrypt-data:
  netdata-cache:
  netdata-config:
  netdata-lib:
  zwave-js-config:
